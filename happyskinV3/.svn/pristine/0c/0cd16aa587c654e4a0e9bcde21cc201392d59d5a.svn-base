import React, { Component } from 'react';
import {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    ScrollView,
    Image,
    Dimensions,
    TouchableOpacity,
    Animated,
    StatusBar,
    Platform
} from 'react-native';
let deviceWidth = Dimensions.get('window').width;
import { Actions } from "react-native-router-flux";
import ViewMoreText from 'react-native-view-more-text';
import ReviewList from '../components/ReviewList';
import ExploreList from '../components/explore/ExploreList'
// Google Analytic tracking
import GoogleAnalytics from 'react-native-google-analytics-bridge';
GoogleAnalytics.setTrackerId('UA-57146563-2');
import NavBar, { NavButton, NavButtonText, NavTitle } from 'react-native-nav';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import {Map} from 'immutable';
import * as skintestActions from '../actions/skintestActions';
const actions = [
  skintestActions
];
function mapStateToProps(state) {
  return {
    skintest: state.skintest
  };
}
function mapDispatchToProps(dispatch) {
  const creators = Map()
    .merge(...actions)
    .filter(value => typeof value === 'function')
    .toObject();
  return {
    actions: bindActionCreators(creators, dispatch),
    dispatch
  };
}

class SkinResult extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            routine: [
                {
                    title: 'Trị nám dành cho da dầu',
                    star: 3,
                    date: '4 tuần',
                    count_member: 67,
                    image_thumb: [
                        '../images/img_review_1.png',
                        '../images/img_review_2.png',
                        '../images/img_review_3.png'
                    ]
                },
                {
                    title: 'Trị nám dành cho da dầu',
                    star: 3,
                    date: '4 tuần',
                    count_member: 67,
                    image_thumb: [
                        '../images/img_review_1.png',
                        '../images/img_review_2.png',
                        '../images/img_review_3.png'
                    ]
                },
                {
                    title: 'Trị nám dành cho da dầu',
                    star: 3,
                    date: '4 tuần',
                    count_member: 67,
                    image_thumb: [
                        '../images/img_review_1.png',
                        '../images/img_review_2.png',
                        '../images/img_review_3.png'
                    ]
                },
                {
                    title: 'Trị nám dành cho da dầu',
                    star: 3,
                    date: '4 tuần',
                    count_member: 67,
                    image_thumb: [
                        '../images/img_review_1.png',
                        '../images/img_review_2.png',
                        '../images/img_review_3.png'
                    ]
                }
            ],
            scrollY: new Animated.Value(0),
        }
    }

    componentWillMount() {
      //this.props.actions.loadDataSkintest();
    }
    
    componentDidMount(){
      if (!this.props.skintest.results) {
        this.props.actions.loadDataSkintResult();
      }
      GoogleAnalytics.trackScreenView('View Skintest Results: ');
    }

    viewDetail(title, content) {
      Actions.pageSkinDetail({title: title, content: content});
    }
    

    getImage(index) {
      switch(index) {
        case 0:
        return <Image source={require('../images/icons/ic_loai_da.png')} style={styles.iconAtribute}/>;
        case 1:
        return <Image source={require('../images/icons/ic_lieu_trinh.png')} style={styles.iconAtribute}/>;
        case 2:
        return <Image source={require('../images/icons/ic_cam_nang.png')} style={styles.iconAtribute}/>;
        case 3:
        return <Image source={require('../images/icons/ic_skintest_tip.png')} style={styles.iconAtribute}/>;
        case 4:
        return <Image source={require('../images/icons/ic_cam_nang.png')} style={styles.iconAtribute}/>;
        case 5:
        return <Image source={require('../images/icons/ic_cam_nang.png')} style={styles.iconAtribute}/>;
        default :
        return <Image source={require('../images/icons/ic_cam_nang.png')} style={styles.iconAtribute}/>;
      }
    }

    getBgStyle(index) {
        switch (index) {
            case 0:
                return '#ffb765';
            case 1:
                return '#f3aec1';
            case 2:
                return '#c5acd3';
            case 3:
                return '#879bce';
            default:
                return 'white';
        }
    }

    _renderSkinObject() {
        return (
            <View style={styles.skinResult}>
                <Text style={styles.txtSkinResult}>{this.props.skintest.results.skinType} là gì?</Text>
                <View style={styles.boxDetail}>
                    <View style={styles.rowResult}>
                        <View style={styles.styleName}>
                            <Text style={this.props.skintest.results.skinObject.od.name == 'O' ? styles.txtNameActive : styles.txtName}>O</Text>
                            <Text style={this.props.skintest.results.skinObject.od.name == 'D' ? styles.txtNameActive : styles.txtName}>D</Text>
                        </View>
                        <Text style={styles.styleText}>Hơi dầu</Text>
                    </View>
                    <View style={styles.rowResult}>
                        <View style={styles.styleName}>
                            <Text style={this.props.skintest.results.skinObject.rs.name == 'R' ? styles.txtNameActive : styles.txtName}>R</Text>
                            <Text style={this.props.skintest.results.skinObject.rs.name == 'S' ? styles.txtNameActive : styles.txtName}>S</Text>
                        </View>
                        <Text style={styles.styleText}>Rất nhạy cảm</Text>
                    </View>
                    <View style={styles.rowResult}>
                        <View style={styles.styleName}>
                            <Text style={this.props.skintest.results.skinObject.np.name == 'N' ? styles.txtNameActive : styles.txtName}>N</Text>
                            <Text style={this.props.skintest.results.skinObject.np.name == 'P' ? styles.txtNameActive : styles.txtName}>P</Text>
                        </View>
                        <Text style={styles.styleText}>Nhiều sắc tố</Text>
                    </View>
                    <View style={styles.rowResult}>
                        <View style={styles.styleName}>
                            <Text style={this.props.skintest.results.skinObject.tw.name == 'T' ? styles.txtNameActive : styles.txtName}>T</Text>
                            <Text style={this.props.skintest.results.skinObject.tw.name == 'W' ? styles.txtNameActive : styles.txtName}>W</Text>
                        </View>
                        <Text style={styles.styleText}>Có nếp nhăn</Text>
                    </View>
                </View>
                <Text style={styles.txtContent}>Bạn là người đầu tiên ra biển lúc sáng sớm và ở lại cuối cùng đến khi hoàng hôn. Những người OSPW có thể từng rất hay phơi nắng. Là những người thường xuyên du lịch và rất quảng giao.</Text>
            </View>
        );
    }

    _renderSkinAtributes() {
        return this.props.skintest.results.skinDetail.atributes.map((atribute, index) => {
            var bgStyle = this.getBgStyle(index);
            return (
                <TouchableOpacity activeOpacity={1} style={[styles.rowAtribute, { backgroundColor: bgStyle }]} key={index} onPress={ () => this.viewDetail(atribute.name, atribute.content)}>
                    <View style={styles.colAtributeIcon}>
                        {
                          atribute.image_thumb ?
                          <Image src={{ uri: atribute.image_thumb+'.png' }} style={styles.iconAtribute} />
                          :
                          this.getImage(index)
                        }
                    </View>
                    <View style={styles.colAtributeName}>
                        <Text style={styles.atributeName} numberOfLines={2}>{atribute.name}</Text>
                    </View>
                    <Image source={require('../images/icons/ic_arrow_next3.png')} style={styles.iconAtributeNext} />
                </TouchableOpacity>
            );
        })
    }

    render() {
        return (
            <View style={main.container}>
                <StatusBar
                    backgroundColor="white"
                    barStyle="default"
                />
                <View style={{flex: 1}}>
                    <NavBar style={{navBar: main.navBarWhite, statusBar: main.statusBar}} statusBar={{barStyle: 'dark-content', backgroundColor: '#fff'}} >
                        <NavButton onPress={() => Actions.pop()} style={{flexDirection: 'row',  alignItems: 'center',marginLeft: 0, padding: Platform.OS === 'ios' ? 7 : 15,}}>
                            <Image style={{height: 12, width: 13}} source={require('../images/icons/ic_back_blue2.png')}/>
                            <View>
                                <Text style={{fontSize: 14, color: 'rgb(68, 110, 182)', marginLeft: 7}}>Hồ sơ làm đẹp</Text>
                            </View>
                        </NavButton>
                    </NavBar>
                    <View style={[styles.container]}>
                      {this.props.skintest.results ?
                        <ScrollView
                            style={styles.scrollView}
                            scrollEventThrottle={16}
                            bounces={false}>
                            <View style={styles.header}>
                                <Text style={styles.labelSkin}>Bạn thuộc nhóm da</Text>
                                <View style={styles.contentHeader}>
                                </View>
                                <Text style={styles.skinType}>{this.props.skintest.results.skinType}</Text>
                            </View>
                            {
                                this._renderSkinObject()
                            }
                            <View style={styles.mainInfoSuggest}>
                                {
                                    this._renderSkinAtributes()
                                }
                            </View>
                            <View style={styles.headerProcess}>
                                <Text style={styles.titleProcess}>{'Liệu trình dành cho da '+this.props.skintest.results.skinType+''.toUpperCase()}</Text>
                                <View style={{paddingLeft: 15, paddingRight: 15}} >
                                    <ReviewList data={this.state.routine} />
                                </View>
                            </View>
                            <View style={styles.headerProcess}>
                                <Text style={styles.titleProcess}>{'Sản phẩm dành cho da '+this.props.skintest.results.skinType+''.toUpperCase()}</Text>
                                {
                                  this.props.skintest.results.skinDetail.products.map((product, index) => {
                                    return (
                                      <View>
                                      {index < 4 ?
                                      <TouchableOpacity  onPress={() => Actions.exploreReview({id: product.id})} key={index} style={styles.ctItemDeals}>
                                        <Image style={{height: 100, width: 100}} source={{ uri: product.image_thumb+'_300x300.png' }} />
                                        <View style={{flex: 1, marginLeft: 10}}>
                                          <Text style={styles.txtTitleDeals}>{product.name}</Text>
                                          <View style={{flexDirection: 'row', marginTop: 3}}>
                                            <Text style={styles.priceNew}>{product.priceNew}</Text>
                                            <Text style={styles.priceOld}>{product.priceOld}</Text>
                                          </View>
                                        </View>
                                      </TouchableOpacity>
                                      : null }
                                      </View>
                                    )
                                  })
                                }
                            </View>
                            <View style={styles.headerProcess}>
                                <Text style={styles.titleProcess}>{'Bài viết dành cho da '+this.props.skintest.results.skinType+''.toUpperCase()}</Text>
                                <View>
                                    {
                                        // this.state.explore.map((item, index) => {
                                        //     return (
                                        //         <ExploreList explore={item} key={index} />
                                        //     )
                                        // })
                                    }
                                </View>
                            </View>
                            <TouchableOpacity onPress={() => Actions.skinTest() } style={styles.boxSkintest}>
                              <Text style={styles.txtRefresh}>Kiểm tra lại Da?</Text>
                            </TouchableOpacity>
                        </ScrollView>
                      :
                      null
                    }
                    {
                      this.props.skintest.isFetching ?
                      <View style={main.mainSpin1}>
                        <Image style={main.imgLoading} source={require('../images/rolling.gif')} />
                      </View>
                      : null
                    }
                    </View>
                </View>
            </View>
        );
    }
}

const HEADER_MAX_HEIGHT = 44;
const HEADER_MIN_HEIGHT = 0;
const HEADER_SCROLL_DISTANCE = HEADER_MAX_HEIGHT - HEADER_MIN_HEIGHT;
let main = require('../styles/Main');
const styles = StyleSheet.create({
    content: {
        flex: 1,
        backgroundColor: '#FFFFFF',
    },
    customerNav: {
        height: 44,
        justifyContent: 'space-between',
        flexDirection: 'row',
    },
    customerNavBack: {
        padding: 15,
        paddingLeft: Platform.OS === 'ios' ? 7 : 15,
        alignItems: 'center',
        justifyContent: 'center',
        flexDirection: 'row',
    },
    navBack: {
        width: 8,
        height: 14,
        marginRight: 5
    },
    container: {
        flex: 1
    },
    scrollView: {
        flex: 1,
        width: deviceWidth,
        backgroundColor: '#FFFFFF',
    },
    header: {
        paddingBottom: 20
    },
    labelSkin: {
        paddingLeft: 15,
        paddingRight: 15,
        fontSize: 36,
        color: '#D73554',
        paddingBottom: 15
    },
    contentHeader: {
        backgroundColor: '#D73554',
        height: 86,
        position: 'relative'
    },
    skinType: {
        fontSize: 72,
        color: 'white',
        position: 'absolute',
        bottom: 0,
        left: 15,
        backgroundColor: 'transparent',
        fontWeight: '500'
    },
    skinResult: {
        paddingTop: 20,
        paddingBottom: 20,
        paddingLeft: 15,
        paddingRight: 15
    },
    boxDetail: {
        flexWrap: 'wrap',
        flexDirection: 'row',
        paddingBottom: 40
    },
    txtSkinResult: {
        color: '#8750A1',
        fontSize: 14,
        paddingBottom: 20,
    },
    rowResult: {
        width: (deviceWidth - 30) / 2,
        flexDirection: 'row',
        alignItems: 'center'
    },
    styleName: {
        paddingRight: 15,
        flexDirection: 'row',
        alignItems: 'center'
    },
    txtNameActive: {
        fontSize: 16,
        color: '#E9457A',
        paddingRight: 5
    },
    txtName: {
        fontSize: 16,
        color: '#F3AEC1',
        paddingRight: 5
    },
    txtContent: {
        fontSize: 16,
        color: '#333333'
    },
    contentResult: {
        margin: 15
    },
    descResult: {
        fontSize: 16
    },
    mainViewMore: {
        marginTop: 10,
        marginBottom: 10
    },
    viewMore: {
        fontSize: 16,
        color: '#4a90e2'
    },
    headerProcess: {
        borderBottomWidth: 1,
        borderColor: '#f6f6f6',
        borderTopWidth: 1,
        marginBottom: 15
    },
    titleProcess: {
        padding: 15,
        color: '#8750A1',
        fontSize: 14
    },
    btnViewProcess: {
        width: deviceWidth - 30,
        borderRadius: 5,
        backgroundColor: '#333333',
        marginLeft: 15,
        justifyContent: 'center',
        alignItems: 'center'
    },
    labelBtnViewProcess: {
        paddingTop: 15,
        paddingBottom: 15,
        color: 'white',
        fontSize: 15
    },
    rowAtribute: {
        flexDirection: "row",
        alignItems: 'center',
        justifyContent: 'center',
        padding: 20,
        backgroundColor: '#FFB765',
    },
    colAtributeIcon: {
        flex: 0.2,
    },
    iconAtribute: {
        flex: 1,
        width: 45,
        height: 45*130/96,
        resizeMode: 'contain',
    },
    colAtributeName: {
        flex: 0.7,
    },
    atributeName: {
        color: '#FFFFFF',
        padding: 5,
        fontSize: 20,
        paddingTop: 0,
    },
    atributeShortContent: {
        color: '#FFFFFF',
        padding: 5,
    },
    iconAtributeNext: {
        flex: 0.1,
        width: 9,
        height: 15,
        resizeMode: 'contain',
        paddingLeft: 5
    },
    mainInfoSuggest: {
        marginTop: 20
    },
    ctItemDeals: {
      flexDirection: 'row',
      alignItems: 'center',
      marginTop: 20,
      padding: 15
    },
    txtDeals: {
      color: 'rgb(41, 42, 57)',
      fontSize: 32,
    },
    txtTitleDeals: {
      color: '#4E76A2',
      fontSize: 16,
      paddingBottom: 5,
    },
    priceNew: {
      color: '#292A39',
      fontSize: 14,
    },
    priceOld: {
      flex: 1,
      marginLeft: 5,
      color: '#C8C7CC',
      textDecorationLine : 'line-through',
      fontSize: 14
    },
    boxSkintest: {
      height: 48,
      backgroundColor: '#FE7535',
      borderRadius: 4,
      justifyContent: 'center',
      alignItems: 'center',
      marginRight: 15,
      marginLeft: 15,
      marginBottom: 20
    },
    txtRefresh: {
      color: '#FFFFFF',
      fontSize: 16,
    },
});
export default connect(mapStateToProps, mapDispatchToProps)(SkinResult);
