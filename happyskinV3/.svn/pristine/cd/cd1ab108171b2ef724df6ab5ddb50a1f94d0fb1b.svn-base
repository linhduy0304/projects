/**
 * Created by Mrbacdoan on 04/08/2016.
 */
import React from 'react';
import {
  AppRegistry,
  StyleSheet,
  View,
  Text,
  TextInput,
  Image,
  TouchableOpacity,
  ScrollView,
  Dimensions,
  TouchableHighlight,
  TouchableWithoutFeedback,
  Platform,
  StatusBar,
  Alert
} from "react-native";
import {Actions} from "react-native-router-flux";
import Button from "react-native-button";
import NavBar, { NavButton, NavButtonText, NavTitle } from 'react-native-nav'; 
import {GoogleSignin} from 'react-native-google-signin';

var DeviceInfo = require('react-native-device-info');
let deviceWidth = Dimensions.get('window').width;
let deviceHeight = Dimensions.get('window').height;
const StoreService = require('../../services/StoreService').default;
let Constant = require('../../services/Constant');
var {FBLogin, FBLoginManager} = require('react-native-facebook-login');

import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import {Map} from 'immutable';
import * as profileActions from '../../actions/profileActions';
const actions = [
  profileActions
];

function mapStateToProps(state) {
  return {
    profile: state.profile,
  };
}
function mapDispatchToProps(dispatch) {
  const creators = Map()
    .merge(...actions)
    .filter(value => typeof value === 'function')
    .toObject();
  return {
    actions: bindActionCreators(creators, dispatch),
    dispatch
  };
}

class ModalMenu extends React.Component {
  constructor(props){
    super(props);
    this.state = {
     
    };
  }

  componentDidMount() {
    this._setupGoogleSignin();
  }

  async _setupGoogleSignin() {
    try {
      await GoogleSignin.configure({
        iosClientId: '799479458926-tss4fdrt1og8nvnvmpibvng9ktihp0e2.apps.googleusercontent.com',
        webClientId: '799479458926-tss4fdrt1og8nvnvmpibvng9ktihp0e2.apps.googleusercontent.com',
        offlineAccess: false
      });
    }
    catch (err) {
      console.log("Google signin error", err.code, err.message);
    }
  }


  logoutAction() {
    Alert.alert(
      'Thông báo',
      'Bạn muốn thoát ứng dụng?',
      [
        {text: 'Thoát', onPress: () => this.logout(), style: 'cancel'},
        {text: 'Huỷ bỏ', onPress: () => null}
      ]
    )
  }

  logout() {
    var _this = this;
    new StoreService().getSession(Constant.HS_HEADER_REQUEST)
    .then((header) => {
      if (header.Gotoken != '') {
        GoogleSignin.signOut()
        .then(() => {
          _this.props.actions.logout(Platform.OS == 'ios' ?  _this.props.profile.currentUser.device_ios : _this.props.profile.currentUser.device_android);
        })
        .catch((err) => {
        });
      } else if (header.Fbtoken != '') {
        FBLoginManager.logout(function(error, data){
          _this.props.actions.logout(Platform.OS == 'ios' ?  _this.props.profile.currentUser.device_ios : _this.props.profile.currentUser.device_android);
        });
      } else {
        _this.props.actions.logout(Platform.OS == 'ios' ?  _this.props.profile.currentUser.device_ios : _this.props.profile.currentUser.device_android);
      }
    })
    .catch((err) => {
    });
  }

  render(){
    var _this=this;
    return (
      <View style={{backgroundColor: '#fff', }}>
         <StatusBar
          backgroundColor="#fff"
          barStyle= 'light-content'
        />
        <NavBar style={{navBar: main.navBarWhite}} statusBar={{barStyle: 'light-content', backgroundColor: '#fff' }} >
          <NavButton onPress={()=> this.props.closeModal()} style={main.navBack}>
            <Image  style={{height: 16, width: 18}} source={require('../../images/icons/ic_menu.png')} />
          </NavButton>
          <NavTitle style={main.navTitle}>
          </NavTitle>
          <NavButton style={main.navSave}  >
        </NavButton>
        </NavBar>
        <View style={{flexDirection: 'row'}}>
          <Text style={styles.txtUserName}>Tammy Ngo</Text>
          <TouchableOpacity style={styles.containerAvatar}>
            <Image style={styles.avatar} source={require('../../images/avatar_happyskin.png')}/>
          </TouchableOpacity>
        </View>
        <TouchableOpacity onPress={() => Actions.editProfile()} style={styles.containerItem}>
          <Image style={{height: 16, width: 24, marginTop: 4}} source={require('../../images/icons/ic_edit_profile.png')}/>
          <View style={styles.containerTitle}>
            <Text style={styles.txtTitle}>Edit Profile</Text>
          </View>
        </TouchableOpacity>
        <TouchableOpacity style={styles.containerItem}>
          <Image style={{height: 20, width: 22}} source={require('../../images/icons/ic_beauty.png')}/>
          <View style={styles.containerTitle}>
            <Text style={styles.txtTitle}>Beauty Profile</Text>
          </View>
        </TouchableOpacity>
        <TouchableOpacity style={styles.containerItem}>
          <Image style={{height: 24, width: 24}} source={require('../../images/icons/ic_payment.png')}/>
          <View style={styles.containerTitle}>
            <Text style={styles.txtTitle}>Payment</Text>
          </View>
        </TouchableOpacity>
        <TouchableOpacity onPress={()=> Actions.setting()} style={styles.containerItem}>
          <Image style={{height: 24, width: 24}} source={require('../../images/icons/ic_setting_1.png')}/>
          <View style={styles.containerTitle}>
            <Text style={styles.txtTitle}>Settings</Text>
          </View>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => this.logoutAction()} style={styles.containerItem}>
          <Image style={{height: 24, width: 24}} source={require('../../images/icons/ic_logout.png')}/>
          <View style={styles.containerTitle}>
            <Text style={styles.txtTitle}>Log Out</Text>
          </View>
        </TouchableOpacity>
      </View>
    );
  }
}

let main = require('../../styles/Main');
const styles = StyleSheet.create({
  containerTitle: {
    flex: 1,
    // paddingTop: 10,
    paddingBottom: 15,
    marginLeft: 28,
    marginRight: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#edeef1'
  },
  txtTitle: {
    color: '#333333',
    fontSize: 17
  },
  containerItem: {
    flexDirection: 'row',
    paddingLeft: 33,
    paddingTop: 15
  },
  icMenu: {
    width: 20*54/48,
    marginLeft: 20,
    marginTop: Platform.OS == 'android' ? DeviceInfo.getSystemVersion().slice(0, 1) != 4 ?  StatusBar.currentHeight : 10 : 0
  },
  txtUserName:  {
    marginTop: 20,
    flex: 1, 
    color: '#292a39', 
    fontSize: 32,
    fontWeight: '500',
    marginLeft: 15
  },
  containerAvatar: {
    borderWidth: 5,
    borderRadius: 50,
    borderColor: '#fff',
    marginRight: 15
  },
  avatar: {
    height: 100,
    width: 100,
    borderRadius: 50,
  },
});
export default connect(mapStateToProps, mapDispatchToProps)(ModalMenu);
// module.exports = ModalMenu;
