import React from 'react';
import {
  AppRegistry,
  StyleSheet,
  View,
  Text,
  TextInput,
  Image,
  TouchableOpacity,
  ScrollView,
  Dimensions,
  StatusBar,
  Platform,
  Alert,
  FlatList,
  ImageBackground
} from "react-native";

import Button from "react-native-button";
import {Actions} from "react-native-router-flux";
import NavBar, { NavButton, NavButtonText, NavTitle } from 'react-native-nav'; 
import Spinner from "react-native-spinkit";
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
let deviceWidth = Dimensions.get('window').width;
let deviceHeight = Dimensions.get('window').height;

import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import {Map} from 'immutable';
import * as skinDiaryActions from '../actions/skinDiaryActions';
const actions = [
  skinDiaryActions
];
function mapStateToProps(state) {
  return {
    skinDiary: state.skinDiary,
    profile: state.profile
  };
}
function mapDispatchToProps(dispatch) {
  const creators = Map()
    .merge(...actions)
    .filter(value => typeof value === 'function')
    .toObject();
  return {
    actions: bindActionCreators(creators, dispatch),
    dispatch
  };
}

class SkinDiaryDone extends React.Component {
  constructor(props) {
    super()
    this.state = {
      note: '',
    }
  }

  dateNow() {
    var date = new Date();
    var now = date.getDate()+'/'+(parseInt(date.getMonth())+1)+'/'+date.getFullYear();
    return now;
  }

  save() {
    this.setState({
      error: ''
    })
    if(this.state.note == '') {
      this.setState({
        error: 'Bạn phải nhập ghi chú.'
      })
      return;
    }
    this.props.actions.skinDiaryAdd(this.props.image.uri, this.state.note)
  }

  render(){
    return (
      <View style={styles.container}>
        <StatusBar
          backgroundColor="#fff"
          barStyle="dark-content"
        />
        <KeyboardAwareScrollView
          extraHeight={60}
          viewIsInsideTabBar={false}
          keyboardShouldPersistTaps={true}>
        <ScrollView
          bounces={false}
          keyboardShouldPersistTaps={'always'}>
          <ImageBackground style={{height: 490, width: deviceWidth}} source={this.props.image}>
            <View style={{alignItems: 'flex-start', paddingTop: 30, flex: 1}}>
              <TouchableOpacity onPress={() => Actions.pop()} style={{padding: 5,marginLeft: 10, flexDirection: 'row', alignItems: 'center'}}>
                <Image style={{height: 14, width: 14*27/45}} source={require('../images/icons/ic_back.png')} />
                <Text style={styles.txtRetake}>Chụp lại</Text>
              </TouchableOpacity>
            </View>
            <View style={{flexDirection: 'row'}}>
              <View style={{backgroundColor: 'rgba(215, 53, 84, 0.7)',borderTopRightRadius: 4, paddingTop: 4, paddingBottom: 4, paddingLeft: 15, paddingRight: 8}}>
                <Text style={{fontSize: 12, color: '#fff'}}>{this.props.profile.currentUser.full_name}  {this.dateNow()}</Text>
              </View>
              <View style={{flex: 1}}/>
            </View>
          </ImageBackground>
          <View style={styles.content}>
            <View style={styles.ctNote}>
              <TextInput
                style={styles.input}
                placeholder="Thêm ghi chú"
                placeholderTextColor="rgb(194, 197, 208)"
                underlineColorAndroid="transparent"
                onChangeText={(note) => this.setState({note: note})}
                value={this.state.note}
              />
            </View>
            {
              this.state.error ?
              <Text style={styles.txtError}>{this.state.error}</Text>
              : null
            }
            <View style={styles.containerAction}>
              <Button 
                containerStyle={{backgroundColor:"rgb(253, 117, 53)", borderRadius: 4, justifyContent: 'center', height: 48, paddingLeft: 30, paddingRight: 30 }}
                style={styles.txtShare}
                onPress={() => this.save()}
                >
                Lưu lại
              </Button>
              {/* <Button 
                containerStyle={{backgroundColor:"#fff",borderWidth: 1, borderColor: 'rgb(254, 117, 53)', justifyContent: 'center', borderRadius: 4, height: 48, paddingLeft: 20, paddingRight: 20 }}
                style={styles.txtSend}
                onPress={() => Actions.skinCoach()}
                >
                Gửi cho Coach
              </Button> */}
             
            </View>
          </View>
        </ScrollView>
        </KeyboardAwareScrollView>
        {
          this.props.skinDiary.isFetching ? 
            <View style={main.mainSpin}>
              <Spinner isFullScreen={true} isVisible={true} size={50} type={'Circle'} color={'#FFFFFF'}/>
            </View> : null
        }
      </View>
    )
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1
  },
  txtError: {
    marginTop: 5,
    color: 'rgb(255, 183, 101)',
    fontSize: 16
  },
  content: {
    backgroundColor: '#fff',
    flex: 1,
    paddingTop: 10,
    paddingLeft: 15,
    paddingBottom: 20,
    paddingRight: 15,
    
  },
  containerAction: {
    marginTop: 48,
    flexDirection: 'row',
    justifyContent: 'center',
  },
  txtSend: {
    color: 'rgb(254, 117, 53)',
    fontSize: 16,
    fontWeight: 'bold'
  },
  txtShare: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold'
  },
  input: {
    padding: 0,
  },
  txtRetake: {
    color: '#fff',
    marginLeft: 5,
    backgroundColor: 'transparent'
  },
  ctNote: {
    height: 54,
    borderBottomColor: 'rgb(228, 232, 242)',
    borderBottomWidth: 1,
    justifyContent: 'center'
  },
 
});
let main = require('../styles/Main');
export default connect(mapStateToProps, mapDispatchToProps)(SkinDiaryDone);
