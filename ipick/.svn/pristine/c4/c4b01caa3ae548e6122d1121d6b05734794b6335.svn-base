/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {
  Platform,
  StyleSheet,
  Text,
  View,
  Image,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Dimensions
} from 'react-native';

import NavBar, { NavButton, NavGroup, NavTitle } from 'react-native-nav';
import { Actions } from "react-native-router-flux";
import Button from "react-native-button";
import PostBlank from './PostBlank';
import PostImage from './PostImage';
import PostLink from './PostLink';
import PostVideo from './PostVideo';
import PostAudio from './PostAudio';
import PostArticle from './PostArticle';
//import RNFirebase from 'react-native-firebase';
var Analytics = require('react-native-firebase-analytics');

let deviceWidth = Dimensions.get('window').width;
let deviceHeight = Dimensions.get('window').height;
let css = require('../../Css');
var Modal = require('react-native-modalbox');


class PostAdd extends Component {
  constructor(props) {
    super(props);
    this.state = {
      openModal: false,
      action: 'image',
    }
  }

  componentWillMount() {
    // var firebaseApp = RNFirebase.initializeApp({ debug: false });
    Analytics.logEvent("Post_Screen");
  }

  renderType() {
    switch(this.state.action) {
      case 'image':
        return <PostImage scroll={() => this.refs.scroll.scrollTo({x: 0, y: 0, animated: true})} />
      case 'link':
        return <PostLink scroll={() => this.refs.scroll.scrollTo({x: 0, y: 0, animated: true})} />
      case 'video':
        return <PostVideo scroll={() => this.refs.scroll.scrollTo({x: 0, y: 0, animated: true})} />
      case 'audio':
        return <PostAudio scroll={() => this.refs.scroll.scrollTo({x: 0, y: 0, animated: true})} />
      default:
        return <PostArticle scroll={() => this.refs.scroll.scrollTo({x: 0, y: 0, animated: true})} />
      }
    
  }

  setAction(action) {
    this.setState({
      action: action, 
      openModal: false
    })
  }

  render() {
    return (
      <View style={css.container}>
        <NavBar style={{navBar: css.navBar, statusBar: css.statusBar}} statusBar={{barStyle: 'dark-content', backgroundColor: '#fff'}} >
          <NavGroup>
            <NavButton onPress={() => Actions.pop()} style={css.navBack}  >
              <Image style={{height: 12, width: 13}} source={require('../../images/icons/ic_back.png')} />
            </NavButton>
            <View style={{marginLeft: 9,justifyContent: 'center'}}>
              <Text style={css.txtTitle}>Bài viết mới</Text>
            </View>
          </NavGroup>
          {/* <NavGroup>
            <NavButton onPress={() => Actions.pop()} style={css.navBack}  >
              <Text style={css.txtSave}>Lưu nháp</Text>
            </NavButton>
            <NavButton onPress={() => this.send()} style={css.navBack}  >
            <Text style={css.txtSave}>Gửi</Text>
            </NavButton>
          </NavGroup> */}
        </NavBar>

        <ScrollView
          bounces={false}
          keyboardShouldPersistTaps={'always'}
          ref='scroll'>
         
          {/* <View style={styles.ctAvatar}>
            <Image style={styles.avatar} source={{uri: this.state.avatar+'.png'}} />
            <Text style={styles.txtName}>Lê Linh Duy</Text>
          </View> */}
         
          {
            this.renderType() 
          }

        </ScrollView>
        <View style={styles.ctBottom}>
          <Text style={styles.txtAdd}>Thêm vào bài viết của bạn</Text>
          <TouchableOpacity onPress={() => this.setState({openModal: true})} >
            <Image style={styles.icBottom} source={require('../../images/icons/ic_picture.png')} />
          </TouchableOpacity>
          <TouchableOpacity onPress={() => this.setState({openModal: true})} >
            <Image style={styles.icBottom} source={require('../../images/icons/ic_play.png')} />
          </TouchableOpacity>
          <TouchableOpacity onPress={() => this.setState({openModal: true})} >
            <Image style={styles.icBottom} source={require('../../images/icons/ic_comment_send.png')} />
          </TouchableOpacity>
        </View>
        <Modal 
          style={{backgroundColor: 'rgba(0, 138, 139, 0.6)'}}
          isOpen={this.state.openModal}
          swipeToClose={true}
          position="bottom"
          animationDuration={200}
          backdropColor="rgba(0, 138, 139, 0.6)"
          onClosed={()=> this.setState({openModal: false}) }>
            <PostBlank active={this.state.action} action={(action) => this.setAction(action)} closeModal={() => this.setState({openModal: false})} />
        </Modal>
      </View>
    )
  }
}

const styles= StyleSheet.create({
  txtAdd: {
    color: 'rgb(51, 51, 51)',
    fontSize: 16,
    flex: 1
  },
  icBottom: {
    marginLeft: 10
  },
  ctBottom: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 15,
    borderTopColor: 'rgb(236, 238, 240)',
    borderTopWidth: 1
  },
  txtName: {
    fontSize: 13,
    color: 'rgb(176, 184, 198)',
    marginLeft: 17,
    flex: 1
  },
  ctAvatar: {
    flexDirection: 'row',
    padding: 15,
    paddingTop: 9,
    paddingBottom: 9,
    alignItems: 'center'
  },
  avatar: {
    height: 32, 
    width: 32,
    borderRadius: 16
  },
});
export default (PostAdd);


