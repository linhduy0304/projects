apply plugin: "com.android.application"
apply plugin: "com.google.firebase.firebase-perf"
apply plugin: "io.fabric"
apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'

import com.google.gms.googleservices.GoogleServicesPlugin

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

project.ext {
    excludeAppGlideModule = true
}

ext {
    compileSdkVersion = 27
    targetSdkVersion = 27
    buildToolsVersion = "27.0.3"
}

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

def getDate() {
    return new Date().format('yyyyMMddHHmmss')
}

android {

//    resValue "string", "mauron85_bgloc_content_authority", "com.jamjavn.jamja.mauron85.bgloc.provider"

    signingConfigs {
        debug {
            if (project.hasProperty('MYAPP_TEST_STORE_FILE')) {
                storeFile file(MYAPP_TEST_STORE_FILE)
                storePassword MYAPP_TEST_STORE_PASSWORD
                keyAlias MYAPP_TEST_KEY_ALIAS
                keyPassword MYAPP_TEST_KEY_PASSWORD
            }
        }
        release {

            String taskRequest = getGradle().getStartParameter().getTaskRequests().toString()
            String flavor = 'publish'
            if (taskRequest.contains('Dev')) flavor = 'dev'
            else if (taskRequest.contains('Alpha')) flavor = 'alpha'

            println('---------------- >>>>>>>> Sinhpn:signingConfigs:Flavor: ' + flavor)

            if ('publish' == flavor) {
                if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                    storeFile file(MYAPP_RELEASE_STORE_FILE)
                    storePassword MYAPP_RELEASE_STORE_PASSWORD
                    keyAlias MYAPP_RELEASE_KEY_ALIAS
                    keyPassword MYAPP_RELEASE_KEY_PASSWORD
                }
            }
            else {

                if (project.hasProperty('MYAPP_TEST_STORE_FILE')) {
                    storeFile file(MYAPP_TEST_STORE_FILE)
                    storePassword MYAPP_TEST_STORE_PASSWORD
                    keyAlias MYAPP_TEST_KEY_ALIAS
                    keyPassword MYAPP_TEST_KEY_PASSWORD
                }
            }
        }
    }
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    flavorDimensions "default"
    defaultConfig {
        applicationId "${AppApplicationId}"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode Integer.parseInt(AppVersionCode)
        versionName "${AppVersionName}"
        signingConfig signingConfigs.release
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        manifestPlaceholders = [onesignal_app_id               : "${OneSignalDevId}",
                                onesignal_google_project_number: "${GoogleProjectDevNumber}"]

        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {

        String taskRequest = getGradle().getStartParameter().getTaskRequests().toString()
        String flavor = 'publish'
        if (taskRequest.contains('Dev')) flavor = 'dev'
        else if (taskRequest.contains('Alpha')) flavor = 'alpha'

        println('---------------- >>>>>>>> Sinhpn:buildTypes:Flavor2: ' + flavor)

        release {
            if (flavor != 'publish') {
                resValue "string", "mauron85_bgloc_content_authority", "com.jamjavn.jamjadev.mauron85.bgloc.provider"
            }

            ext.enableCrashlytics = true
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            if (flavor != 'publish') {
                resValue "string", "mauron85_bgloc_content_authority", "com.jamjavn.jamjadev.mauron85.bgloc.provider"
            }
            ext.enableCrashlytics = false
        }
    }
    productFlavors {
        dev {
            versionName "${AppVersionName}"
            applicationId "${AppApplicationId + 'dev'}"
            manifestPlaceholders = [onesignal_app_id               : "${OneSignalDevId}",
                                    onesignal_google_project_number: "${GoogleProjectDevNumber}",
                                    google_geo_api_key             : "${GoogleGeoApiDevKey}",
                                    firebase_page_link             : "${FirebasePageLinkDev}",
                                    jamja_home_page                : "${HomePageDevHost}",
                                    fabric_api_key                 : "${FabricApiKeyDev}",
                                    partner                        : "${InsiderDevPartnerName}"]

        }

        alpha {
            versionName "${AppVersionName}"
            applicationId "${AppApplicationId + 'dev'}"
            manifestPlaceholders = [onesignal_app_id               : "${OneSignalDevId}",
                                    onesignal_google_project_number: "${GoogleProjectDevNumber}",
                                    google_geo_api_key             : "${GoogleGeoApiDevKey}",
                                    firebase_page_link             : "${FirebasePageLinkDev}",
                                    jamja_home_page                : "${HomePageDevHost}",
                                    fabric_api_key                 : "${FabricApiKeyDev}",
                                    partner                        : "${InsiderDevPartnerName}"]

        }

        publish {
            versionName "${AppVersionName}"
            applicationId "${AppApplicationId}"
            manifestPlaceholders = [onesignal_app_id               : "${OneSignalPublishId}",
                                    onesignal_google_project_number: "${GoogleProjectPublishNumber}",
                                    google_geo_api_key             : "${GoogleGeoApiPublishKey}",
                                    firebase_page_link             : "${FirebasePageLinkPublish}",
                                    jamja_home_page                : "${HomePageProHost}",
                                    fabric_api_key                 : "${FabricApiKeyPro}",
                                    partner                        : "${InsiderPublishPartnerName}"]
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            // For each separate APK per architecture, set a unique version code as described here:
//            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
//            def versionCodes = ["armeabi-v7a":1, "x86":2]
//            def abi = output.getFilter(OutputFile.ABI)
//            if (abi != null) {  // null for the universal-debug, universal-release variants
//                output.versionCodeOverride =
//                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
//            }
//
//            println("---------------${variant.productFlavors[0].name}-${variant.variantData.variantConfiguration.buildType.name}------------")
//            println('applicationId: ' + variant.applicationId)
//            println('versionName: ' + variant.versionName)
//            println('versionCode: ' + variant.versionCode)
//            println('manifestPlaceholders: ' + variant.variantData.variantConfiguration.manifestPlaceholders)
//            println('productFlavors: ' + variant.productFlavors[0].name)
//            println('buildType: ' + variant.variantData.variantConfiguration.buildType.name)
//            println('=====================================================================================================')
//
//            def projectName = 'JAMJA'
//            def SEP = '_'
//            def flavorName = variant.productFlavors[0].name
//            def buildTypeName = variant.variantData.variantConfiguration.buildType.name
//            def appVersionName = variant.versionName
//            def date = new Date()
//            def formattedDate = date.format('ddMMyy_HHmm')
//            outputFileName = projectName + SEP + flavorName + SEP + buildTypeName + SEP + appVersionName + SEP + formattedDate + ".apk"
//        }

        variant.outputs.all { output ->
            println("---------------${variant.productFlavors[0].name}-${variant.variantData.variantConfiguration.buildType.name}------------")
            println('applicationId: ' + variant.applicationId)
            println('versionName: ' + variant.versionName)
            println('versionCode: ' + variant.versionCode)
            println('manifestPlaceholders: ' + variant.variantData.variantConfiguration.manifestPlaceholders)
            println('productFlavors: ' + variant.productFlavors[0].name)
            println('buildType: ' + variant.variantData.variantConfiguration.buildType.name)
            println('=====================================================================================================')

            def projectName = 'JAMJA'
            def SEP = '_'
            def flavorName = variant.productFlavors[0].name
            def buildTypeName = variant.variantData.variantConfiguration.buildType.name
            def appVersionName = variant.versionName
            def date = new Date()
            def formattedDate = date.format('ddMMyy_HHmm')
            outputFileName = projectName + SEP + flavorName + SEP + buildTypeName + SEP + appVersionName + SEP + formattedDate + ".apk"
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:${SupportVer}"
    implementation 'com.facebook.react:react-native:0.55.4'
    // From node_modules

    implementation "com.google.android.gms:play-services-base:${GGVer}"
    implementation "com.google.android.gms:play-services-maps:${GGMapVer}"
    implementation "com.google.android.gms:play-services-location:${GGMapVer}"
    implementation("com.google.android.gms:play-services-gcm:16.0.0") {
        force = true
    }
    implementation 'com.google.firebase:firebase-inappmessaging-display:17.1.0'
    implementation "com.google.firebase:firebase-core:${FirebaseCore}"
    implementation "com.google.firebase:firebase-config:${FirebaseConfig}"
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
        transitive = true
    }
    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.google.firebase:firebase-messaging:${FirebaseMessaging}"
    implementation "com.google.firebase:firebase-perf:${FirebasePerf}"
    implementation "com.google.firebase:firebase-crash:${FirebaseCrashReporting}"
    implementation "com.google.firebase:firebase-invites:${FirebaseInvites}"
    implementation "com.google.firebase:firebase-auth:${FirebaseAuth}"

    implementation 'me.leolin:ShortcutBadger:1.1.21@aar'
    implementation 'com.google.code.gson:gson:2.8.5'

    implementation project(':react-native-gesture-handler')
    implementation project(':realm')
    implementation project(':lottie-react-native')
    implementation project(':react-native-version-number')
    implementation(project(':react-native-firebase')) {
        transitive = false
    }
    implementation project(':react-native-interactable')
    implementation project(':react-native-onesignal')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-i18n')
    implementation project(':react-native-fbsdk')
    implementation project(':react-native-google-analytics-bridge')
    implementation project(':react-native-svg')
    implementation(project(':react-native-maps')) {
        exclude group: 'com.google.android.gms', module: 'play-services-base'
        exclude group: 'com.google.android.gms', module: 'play-services-maps'
    }

    implementation(project(':react-native-fast-image')) {
        exclude group: "com.android.support"
        exclude group: "com.squareup.okhttp3"
    }

    implementation files('libs/YouTubeAndroidPlayerApi.jar')
    implementation ("com.github.bumptech.glide:glide:4.8.0") {
        exclude group: "com.android.support"
    }
    annotationProcessor 'androidx.annotation:annotation:1.0.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

//    implementation(project(':react-native-insider')) {
//        exclude group: 'com.google.android.gms'
//        exclude group: 'com.google.firebase'
//    }

    implementation project(':react-native-insider')
    implementation project(':react-native-code-push')
    compile project(':@mauron85_react-native-background-geolocation')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
GoogleServicesPlugin.config.disableVersionCheck = true
