import React from 'react';
import PropTypes from 'prop-types';
import {View, Animated, Dimensions, StyleSheet} from 'react-native';
import {Grid, Row} from 'native-base';
import {
    PanGestureHandler,
    PinchGestureHandler,
    State
} from 'react-native-gesture-handler';
import FastImage from 'react-native-fast-image';
import {} from 'rxjs'

import {BasePureComponent} from "../../../../common/BasePureComponent";
import {COLOR_GRAY_BG} from "../../../../../resources/colors";
import SeatRowView from './SeatRowView';
import MovieSeatRole from "./MovieSeatRole";

const windowWidth = Dimensions.get('window').width;
const windowHeight = Dimensions.get('window').height;

const MAX_SCALE = 1.6;
const MIN_SCALE = 0.8;

const sizeStyle = {
    roomWidth: windowWidth, //width equals screen width
    roomHeight: windowHeight * 0.5, //height is 40% of screen height

    boxWidth: windowWidth * MAX_SCALE, //draw movie room in x1.5 room size
    boxHeight: windowHeight * 0.5 * MAX_SCALE, //draw movie room in x1.5 room size
};

export default class RoomView extends BasePureComponent {

    pinchRef = React.createRef();

    bounceLeft;
    bounceRight;
    bounceTop;
    bounceBottom;

    constructor(props) {
        super(props);

        this._calculateBounce(MIN_SCALE);

        this._baseScale = new Animated.Value(MIN_SCALE);
        this._pinchScale = new Animated.Value(MIN_SCALE);
        this._scale = Animated.multiply(this._baseScale, this._pinchScale);

        // this._onPinchGestureEvent = Animated.event(
        //     [
        //         {
        //             nativeEvent: {
        //                 scale: this._pinchScale
        //             }
        //         },
        //     ],
        //     {
        //         useNativeDriver: true
        //     }
        // );

        this._translateX = new Animated.Value(0);
        this._translateY = new Animated.Value(0);

        this._moveX = Animated.divide(this._translateX, this._scale);
        this._moveY = Animated.divide(this._translateY, this._scale);

        this._boxInfo = { x: 0, y: 0, scale: MIN_SCALE };
        // this._onPanGestureEvent = Animated.event(
        //     [
        //         {
        //             nativeEvent: {
        //                 translationX: this._translateX,
        //                 translationY: this._translateY,
        //             },
        //         },
        //     ],
        //     { useNativeDriver: true }
        // );

        console.log('RoomView:init', sizeStyle, this._boxInfo);
    }

    render() {

        console.log('RoomView:render', !!this.props.room ? this.props.room.toJS() : 'undefined room');
        return (
            <View
                style={{
                    width: sizeStyle.roomWidth,
                    height: sizeStyle.roomHeight,
                    justifyContent: 'center',
                    alignItems: 'center'
                }}>
                <PanGestureHandler
                    // onGestureEvent={this._onPanGestureEvent}
                    // onHandlerStateChange={this._onPanHandlerStateChange}
                >

                    <Animated.View>

                        <PinchGestureHandler
                            ref={this.pinchRef}
                            // onGestureEvent={this._onPinchGestureEvent}
                            // onHandlerStateChange={this._onPinchHandlerStateChange}
                        >

                            <Animated.View
                                style={{
                                    width: sizeStyle.roomWidth,
                                    height: sizeStyle.roomHeight,
                                    justifyContent: 'center',
                                    alignItems: 'center'
                                }}>

                                <Animated.View
                                    style={[
                                        styles.box,
                                        {
                                            transform: [
                                                { perspective: 10 },
                                                { scale: this._scale },
                                                { translateX: this._moveX },
                                                { translateY: this._moveY },
                                            ],
                                        }
                                    ]}>

                                    <View
                                        style={{
                                            width: sizeStyle.boxWidth,
                                            height: sizeStyle.boxHeight*0.15,
                                            alignItems: 'center'
                                        }}>

                                        <FastImage
                                            style={{
                                                width: '58%',
                                                height: 24,
                                            }}
                                            source={require('../../../../../resources/bhd/movie_screen.png')}
                                            resizeMode={FastImage.resizeMode.cover}/>

                                    </View>

                                    <View
                                        style={{
                                            width: sizeStyle.boxWidth,
                                            height: sizeStyle.boxHeight*0.7
                                        }}>

                                        <Grid>
                                            {
                                                !!this.props.room &&
                                                this.props.room.get('rowMap').map(r => {
                                                    return (
                                                        <Row
                                                            key={`movie_row_${r.get('row')}`}>

                                                            <SeatRowView
                                                                onSeatPressed={this.props.onSeatPressed}
                                                                seats={r.get('seats')}/>
                                                        </Row>
                                                    )
                                                })
                                            }
                                        </Grid>

                                    </View>

                                    <MovieSeatRole
                                        scalable={this._boxInfo.scale}/>

                                </Animated.View>

                                <Animated.View
                                    style={{
                                        position: 'absolute',
                                        left: 4,
                                        top: sizeStyle.boxHeight*0.15,
                                        height: sizeStyle.boxHeight*0.7
                                    }}>

                                    <View
                                        style={{
                                            width: 16,
                                            height: sizeStyle.boxHeight*0.7,
                                            backgroundColor: 'rgba(0, 0, 0, 0.7)',
                                            borderTopLeftRadius: 8,
                                            borderTopRightRadius: 8,
                                            borderBottomLeftRadius: 8,
                                            borderBottomRightRadius: 8,
                                        }}>

                                    </View>

                                </Animated.View>

                            </Animated.View>
                        </PinchGestureHandler>

                    </Animated.View>

                </PanGestureHandler>
            </View>
        );
    }

    _calculateBounce = (scale) => {
        // this.bounceLeft = sizeStyle.boxWidth/(2*scale) - sizeStyle.roomWidth/2;
        // this.bounceRight = sizeStyle.roomWidth/2 - sizeStyle.boxWidth/(2*scale);
        // this.bounceTop = sizeStyle.boxHeight/(2*scale) - sizeStyle.roomHeight/2;
        // this.bounceBottom = sizeStyle.roomHeight/2 - sizeStyle.boxHeight/(2*scale);

        if (scale === MIN_SCALE) {
            this.bounceLeft = 0;
            this.bounceRight = 0;
            this.bounceTop = 0;
            this.bounceBottom = 0;
        }
        else {
            this.bounceLeft = (scale - MIN_SCALE)*10*23.5;
            this.bounceRight = -(scale - MIN_SCALE)*10*23.5;
            this.bounceTop = (scale - MIN_SCALE)*10*21;
            this.bounceBottom = -(scale - MIN_SCALE)*10*21;
        }
    }

    _onPanHandlerStateChange = event => {
        if (event.nativeEvent.oldState === State.ACTIVE) {

            let x = this._boxInfo.x + event.nativeEvent.translationX;
            let y = this._boxInfo.y + event.nativeEvent.translationY;

            console.log('_onPanHandlerStateChange__1: ', event.nativeEvent, x, y);

            if (x > this.bounceLeft) x = this.bounceLeft;
            else if (x < this.bounceRight) x = this.bounceRight;

            if (y > this.bounceTop) y = this.bounceTop;
            else if (y < this.bounceBottom) y = this.bounceBottom;

            this._boxInfo.x = x;
            this._boxInfo.y = y;

            console.log('_onPanHandlerStateChange: ', event.nativeEvent, this._boxInfo, this.bounceLeft, this.bounceRight, this.bounceTop, this.bounceBottom);

            this._translateX.setOffset(this._boxInfo.x);
            this._translateX.setValue(0);
            this._translateY.setOffset(this._boxInfo.y);
            this._translateY.setValue(0);
        }
    };

    _onPinchHandlerStateChange = event => {
        if (event.nativeEvent.oldState === State.ACTIVE) {
            let scale = this._boxInfo.scale * event.nativeEvent.scale;
            if (scale < MIN_SCALE) scale = MIN_SCALE;
            if (scale > MAX_SCALE) scale = MAX_SCALE;

            this._calculateBounce(scale);

            this._boxInfo.scale = scale;

            console.log('_onPinchHandlerStateChange: ', scale, event.nativeEvent, this._boxInfo);

            this._baseScale.setValue(this._boxInfo.scale);
            this._pinchScale.setValue(MIN_SCALE);
        }
    };

    _onScalableChanged = event => {
        console.log('_onScalableChanged:event', event.nativeEvent);
    }
}

RoomView.propTypes = {
    room: PropTypes.any,
    onSeatPressed: PropTypes.any
}

const styles = StyleSheet.create({
    box: {
        width: sizeStyle.boxWidth,
        height: sizeStyle.boxHeight,
        alignSelf: 'center',
        backgroundColor: COLOR_GRAY_BG
    },
});