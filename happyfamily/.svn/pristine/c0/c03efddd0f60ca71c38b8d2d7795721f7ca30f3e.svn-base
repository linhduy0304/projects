/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {
  Platform,
  StyleSheet,
  Text,
  View,
  Image,
  ScrollView,
  KeyboardAvoidingView
} from 'react-native';
import {Actions} from 'react-native-router-flux';
import { TextField } from 'react-native-material-textfield';
import dismissKeyboard from 'react-native/Libraries/Utilities/dismissKeyboard'
import Spinner from "react-native-spinkit";
import Button from '../components/Button'
import ButtonImageLeft from '../components/ButtonImageLeft';
var {FBLogin, FBLoginManager} = require('react-native-facebook-login');

let css = require('../Css');

import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import {Map} from 'immutable';
import * as auth from '../actions/auth';
const actions = [
  auth
];

function mapStateToProps(state) {
  return {
    auth: state.auth
  };
}

function mapDispatchToProps(dispatch) {
  const creators = Map()
    .merge(...actions)
    .filter(value => typeof value === 'function')
    .toObject();
  return {
    actions: bindActionCreators(creators, dispatch),
    dispatch
  };
}

class Login extends Component {
  constructor(props) {
    super(props);
    this.state = {
      email: '',
      password: '',
      error: '',
    }
  }

  loginWithFacebook() {
    var _this = this;
    loginSocial = true;
    if(Platform.OS == 'android') {
      FBLoginManager.loginWithPermissions(["email"], function(error, data){
        if(data){
          var token = data.credentials.token;
          _this.props.actions.loginFacebook(token);
        }
      });
    }else {
      FBLoginManager.getCredentials(function(error, data){
        if (error) {
          FBLoginManager.loginWithPermissions(["email"],function (error, data) {
            if (!error) {
              var token = data.credentials.token;
              _this.props.actions.loginFacebook(token);
            }
          })
        } else {
          var token = data.credentials.token;
              _this.props.actions.loginFacebook(token);
        }
      });
    }
  }

  login() {
    this.setState({
      error: ''
    });
    dismissKeyboard();
    if(this.state.email == '' || this.state.password == '') {
      this.setState({
        error: 'Các trường không được để trống!'
      });
      return;
    };
    this.props.actions.login(this.state.email, this.state.password)
  }

  componentWillReceiveProps(nextProps) {
    if(nextProps.auth != this.props.auth) {
      this.setState({error: nextProps.auth.error})
    }
  }

  render() {
    return (
      <View style={css.container}>
        <View style={{height: Platform.OS === 'ios' ? 20 : 0, backgroundColor: '#FFFFFF'}}></View>
        <KeyboardAvoidingView behavior='padding' keyboardVerticalOffset={10} style={{ flex: 1 }}>
          <ScrollView
          bounces={false}
          keyboardShouldPersistTaps={'always'}>
            <View style={styles.body}>
            
              <View style={{alignItems: 'center'}}>
                <Image source={require('../images/logo.png')} />
              </View>
              <Text style={styles.txtTip}>Để dùng toàn bộ tính năng của Happy Family, bạn cần đăng nhập tài khoản.</Text>
              <TextField
                label='Tên đăng nhâp / Email'
                autoCorrect={false}
                onChangeText={(email) => this.setState({email: email})}
                onSubmitEditing={() => this.refs.password.focus()}
                tintColor="rgb(194, 196, 202)"
                textColor="rgb(31, 42, 53)"
                baseColor="rgb(194, 197, 208)"
                autoCapitalize="none"
                selectionColor="rgb(41, 162, 104)"
                value={this.state.email}
              />
              <TextField
                ref="password"
                label='Mật khẩu'
                onChangeText={(password) => this.setState({password: password})}
                onSubmitEditing={ () => this.login() }
                tintColor="rgb(194, 196, 202)"
                textColor="rgb(31, 42, 53)"
                baseColor="rgb(194, 196, 202)"
                autoCapitalize="none"
                selectionColor="rgb(41, 162, 104)"
                secureTextEntry={true}
                value={this.state.password}
              />
              {
                this.state.error != '' ?
                  <Text style={{color: 'red', marginTop: 10}}>{this.state.error}</Text>
                  : null
              }
              <Button
                title = 'Đăng nhập'
                color = 'white'
                onPress = {() => this.login()}
                fontSize = {16}
                fontWeight = '500'
                backgroundColor = '#c6247d'
              />
              <Text onPress={() => Actions.forgotPass()} style={styles.txtForgot}>Quên mật khẩu ?</Text>
              <ButtonImageLeft
                title = 'Đăng nhập qua Facebook'
                source = {require('../images/icons/ic_facebook.png')}
                color = 'white'
                onPress = {() => this.loginWithFacebook()}
                fontSize = {16}
                fontWeight = '500'
                backgroundColor = 'rgb(38, 114, 203)'
              />
              <Text style={styles.txtAcount}>Bạn chưa có tài khoản? <Text onPress={() => this.props.navigation.navigate('register')} style={{color: 'rgb(48, 88, 154)'}}>Đăng ký</Text></Text>
            </View>
          </ScrollView>
        </KeyboardAvoidingView>
        {
          this.props.auth.loading ? 
            <View style={css.mainSpin}>
              <Spinner isFullScreen={true} isVisible={true} size={50} type={'Circle'} color={'#FFFFFF'}/>
            </View> : null
        }
      </View>
    )
  }
}

const styles= StyleSheet.create({
  txtAcount: {
    fontSize: 16,
    color: 'rgb(31, 42, 53)',
    marginTop: 16
  },
  txtForgot: {
    color: 'rgb(48, 88, 154)',
    fontSize: 16,
    marginTop: 16,
  },
  txtTip: {
    color: 'rgb(102, 111, 128)',
    fontSize: 13,
    marginTop: 25
  },
  body: {
    padding: 15,
    paddingBottom: 30
  }
});
export default connect(mapStateToProps, mapDispatchToProps)(Login);


