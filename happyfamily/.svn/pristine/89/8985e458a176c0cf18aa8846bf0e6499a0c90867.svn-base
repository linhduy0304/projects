

import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  Image,
  Platform,
  ImageBackground,
  Dimensions,
  ScrollView,
  ActivityIndicator
} from 'react-native';

const window = Dimensions.get('window');

import NavBar, { NavButton, NavGroup, NavTitle } from 'react-native-nav';
import DatePicker from 'react-native-datepicker';
import css from '../../Css';
import {Actions} from 'react-native-router-flux'

import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import {Map} from 'immutable';
import * as individual from '../../actions/individual';
const actions = [
    individual
];

function mapStateToProps(state) {
  return {
    individual: state.individual
  };
}

function mapDispatchToProps(dispatch) {
  const creators = Map()
    .merge(...actions)
    .filter(value => typeof value === 'function')
    .toObject();
  return {
    actions: bindActionCreators(creators, dispatch),
    dispatch
  };
}

class AddIndividual extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            full_name: '',
            birthday: '',
            sex: 1,
            relationship_2_role_code: '',
        }
    }

    componentWillMount() {
        var {code} = this.props;
        this.setState({
            relationship_2_role_code: code,
            sex: this.setSex(code),
        })
    }

    setSex(code) {
        switch(code) {
            case 1:
            case 3:
            case 5:
            case 6:
            case 9:
            case 10:
            case 13:
            case 15:
                sex = 0;
                break;
            case 2:
            case 4:
            case 7:
            case 8:
            case 11:
            case 12:
            case 14:
            case 16:
                sex = 1;
                break;
            default:
                sex = -1;
                break;
        }
        return sex;
    }

    onChange(field, value) {
        this.setState({
            [field]: value,
        });
    }

    dateNow() {
        var date = new Date();
        var now = date.getDate()+'-'+date.getMonth()+'-'+date.getFullYear();
        return now;
    }
    
    convertDate(date){
        if(date != ''){
            var d=new Date(date);
            // update date state
            this.setState({
                birthday: d.getDate()+'-'+(d.getMonth() + 1)+'-'+d.getFullYear()
            })
            return d.getDate()+'-'+(d.getMonth() + 1)+'-'+d.getFullYear();
        }   else{
            return null;
        }
    }

    submit() {
        var { full_name, birthday, sex, relationship_2_role_code } = this.state;
        this.setState({error: ''});
        var body = {
            full_name,
            birthday,
            sex,
            relationship_2_role_code,
        };
        this.props.actions.addIndividual(body);
    }

    render() {
        return (
            <View style={styles.container}>
                <View style={{height: Platform.OS === 'ios' ? 20 : 0, backgroundColor: '#C6247D'}}></View>
                <NavBar style={{navBar: css.navBar, statusBar: css.statusBar}} statusBar={{barStyle: 'light-content', backgroundColor: '#C6247D'}} >
                    <NavButton/>
                    <NavTitle style={css.navTitle}>
                        <Text style={css.txtTitle}>Thêm thành viên</Text>
                    </NavTitle>
                    <NavButton/>
                    <TouchableOpacity onPress={() => Actions.pop()} style={{position: 'absolute', left: 0, padding: 15}}>
                        <Image source={require('../../images/icons/ic_back.png')} />
                    </TouchableOpacity>
                </NavBar>
                <ScrollView style={styles.content}
                    keyboardShouldPersistTaps={'always'}>
                    <ImageBackground style={styles.imgAvatar} source={require('../../images/avatar.png')}>
                        <Image style={styles.icCamera} source={require('../../images/icons/ic_camera_avatar.png')} />
                    </ImageBackground>
                    <View style={styles.boxInfo}>
                        <Text style={styles.txtInfo}>{'Thông tin thành viên mới'.toUpperCase()}</Text>
                        <View style={styles.containerEdt}>
                            <Image style={styles.iconName} source={require('../../images/icons/ic_name.png')}/>
                            <TextInput
                                style={styles.txtInput}
                                placeholder="Họ tên"
                                placeholderTextColor='#919191'
                                underlineColorAndroid="transparent"
                                value={this.state.full_name}
                                onChangeText={(full_name) => this.onChange('full_name', full_name)}
                                autoCapitalize="none"
                                autoCorrect={false}
                                />
                        </View>
                        <View style={styles.containerEdt}>
                            <Image style={styles.iconName} source={require('../../images/icons/ic_name.png')}/>
                            <DatePicker
                                style={{width: 200}}
                                date={this.state.birthday}
                                mode="date"
                                placeholder="Chọn ngày sinh"
                                format="DD-MM-YYYY"
                                confirmBtnText="Confirm"
                                cancelBtnText="Cancel"
                                minDate="01-01-1900"
                                maxDate={this.dateNow()}
                                onDateChange={(birthday) => this.onChange('birthday', birthday)}
                                showIcon={false}
                                customStyles={{dateInput: {borderWidth: 0, alignItems: 'flex-start'}}}
                                />
                        </View>
                        <View style={styles.buttonSubmit}>
                            <TouchableOpacity style={styles.btnSubmit} onPress={ () => !this.props.individual.loading ? this.submit() : null } >
                                {
                                    !this.props.individual.loading ?
                                        <Text style={styles.txtBtnSubmit }>Cập nhật</Text>
                                    :
                                        <ActivityIndicator animating={true} color='#FFFFFF'/>
                                }
                                
                            </TouchableOpacity>
                        </View>
                    </View>
                </ScrollView>
            </View>
        )
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff'
    },
    imgAvatar: {
        width: window.width,
        height: 200,
        justifyContent: 'flex-end'
    },
    icCamera: {
        marginLeft: 15,
        marginBottom: 15,
    },
    content: {
        flex: 1
    },
    txtInfo: {
        paddingTop: 30
    },
    boxInfo: {
        paddingLeft: 15,
        paddingRight: 15,
        flex: 1
    },
    containerEdt:{
        height: 50,
        borderWidth:1,
        borderColor:'#E2E2E2',
        borderRadius: 3,
        flexDirection:'row',
        paddingBottom:5,
        alignItems:'center',
        marginTop: 15,
    },
    iconName: {
        marginLeft: 15,
        marginRight: 15
    },
    txtInput:{
        color:'#000',
        width:window.width*3/4,
    },
    viewCheckbox: {
        flexDirection: 'row',
        justifyContent: 'space-around',
    },
    buttonSubmit: {
        paddingBottom: 50
    },
    btnSubmit: {
        backgroundColor: 'rgb(38, 114, 203)',
        marginTop: 40,
        height: 45,
        borderRadius: 4,
        justifyContent: 'center',
        alignItems: 'center'
    },
    txtBtnSubmit: {
        fontSize: 16,
        fontWeight: '500',
        color: 'white'
    }
})

export default connect(mapStateToProps, mapDispatchToProps)(AddIndividual);