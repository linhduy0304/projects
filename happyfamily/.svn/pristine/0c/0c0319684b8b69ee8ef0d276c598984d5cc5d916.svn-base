
import React from 'react'
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Image,
  Dimensions,
  TextInput,
  Platform,
  StatusBar,
  ScrollView
} from 'react-native';
import Button from '../Button'

var DeviceInfo = require('react-native-device-info');
var Modal = require('react-native-modalbox');
const window1 = Dimensions.get('window');

import * as Progress from 'react-native-progress';
import ImagePicker from 'react-native-image-crop-picker';
import ImageResizer from 'react-native-image-resizer';
import {postStatus, postStatusImage} from '../../actions/home'

import { connect } from 'react-redux'
import Loading from '../Loading';
import Images from './Images';

class ModalStatus extends React.Component {
  constructor(props){
    super(props);
    this.state = {
      status: '',
      active: null,
      images: [],
      paths: [],
    };
  }

  componentWillReceiveProps(nextProps) {
    if(nextProps.home != this.props.home) {
      if(nextProps.home.closeModalStatus) {
        this.props.close()
        this.setState({
          status: ''
        })
      }
    }
  }

  onChange(status) {
    this.setState({
      status: status
    });
    setTimeout(() => {
      if(this.state.status !== '') {
        this.setState({
          active: true
        })
      }else {
        this.setState({
          active: null
        })
      }
    }, 100)
    
  }

  selectImage(){
    ImagePicker.openPicker({
      width: 800,
      height: 800,
      cropping: true,
      multiple: true,
      includeBase64: true
    }).then(images => {
      var source;
      var url = this.state.images ;
      var paths= this.state.paths
      images.map((image, index) => {
        ImageResizer.createResizedImage(image.path, 600, 800, 'JPEG', 80).then((uri) => {
          // source = {uri: 'data:image/jpeg;base64,' + uri.uri, isStatic: true};
          url = url.concat(uri.uri);
          paths= paths.concat(uri.path)
          this.setState({
            images: url,
            paths: paths
          })
          setTimeout(() => {
            this.refs.scrollImages.scrollToEnd({animated: true});
          }, 100)
          
        }).catch((er)=> {
        })
      })
    }).catch(e => {});
  }

  postStatus() {
    if(this.state.active) {
      if(this.state.images.length === 0) {
        var body = {
          type: 'text',
          content: this.state.status
        }
        this.props.postStatus(body)
      }else {
        var body = {
          type: 'image',
          content: this.state.status
        }
        this.props.postStatusImage(body, this.state.paths)
      }
      
    }
  }

  render(){
    return (
        <View style={css.ctModal}>
          <View style={css.ctInput}>
            <Image style={css.avatar} source={this.props.profile.currentUser ? this.props.profile.currentUser.avatar ? {uri: this.props.profile.currentUser.avatar+'.png'} : require('../../images/avatar_default.png') : null} />
            <TextInput 
              value={this.state.status}
              style={css.input}
              autoFocus={true}
              autoGrown={true}
              multiline={true}
              onChangeText = {(status) => this.onChange(status)}
              placeholderTextColor = '#768196'
              placeholder='What do you feel right now?'
              underlineColorAndroid='transparent'
            />
          </View>

          {
            this.state.images.length !== 0 ?
              <ScrollView ref='scrollImages' horizontal={true}>
                <Images onPress={() => this.selectImage()} data={this.state.images}/>
              </ScrollView>
            : null
          }
          <View style={css.btn}>
            <TouchableOpacity onPress={() => this.selectImage()} style={css.ctItem}>
              <View style={css.ctImg}>
                <Image source={require('../../images/icons/ic_camera_1.png')} />
              </View>
              <Text style={css.txt}>Thêm ảnh</Text>
            </TouchableOpacity>
            {/* <View style={css.ctItem}>
              <View style={css.ctImg}>
                <Image source={require('../../images/icons/ic_felling.png')} />
              </View>
              <Text style={css.txt}>Feeling</Text>
            </View>
            <View style={css.ctItem}>
              <View style={css.ctImg}>
                <Image source={require('../../images/icons/ic_location.png')} />
              </View>
              <Text style={css.txt}>Location</Text>
            </View> */}
          </View>

          {
            this.props.home.posting ?
             <Loading 
              title={'Đang đăng bài'}
             />
             : 
             <Button
                title = 'Đăng'
                color = 'white'
                disabled = {this.state.active ? false : true}
                marginTop= {20}
                onPress = {() => this.postStatus()}
                fontSize = {16}
                fontWeight = '500'
                backgroundColor = {this.state.active ? 'rgb(38, 114, 203)' : '#a5bde5'}
              />
          }
          
          
        </View>
    )
  }
}

const css = StyleSheet.create({
  ctModal: {
    marginTop: Platform.OS === 'ios' ? 20 : DeviceInfo.getSystemVersion().slice(0, 1) != 4 ? 44+StatusBar.currentHeight : 44 ,
    padding: 15,
    paddingTop: 15,
    backgroundColor: '#fff',
    width: window1.width-30,
    position: 'relative'
  },
  txt: {
    // fontWeight: 'bold',
    marginLeft: 5,
    color: '#939393'
  },
  btn: {
    marginTop: 20,
    flexDirection: 'row',
    // alignItems: 'center',
    // justifyContent: 'center',
  },
  ctImg: {
    // width: 40,
    // height: 40,
    // borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  ctItem: {
    flexDirection: 'row',
    backgroundColor: '#e6eaf2',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 5,
    paddingLeft: 8,
    paddingRight: 8,
    borderRadius: 5,
  },
  input: {
    flex: 1,
    marginLeft: 15,
    padding: 0,
    fontSize: 16,
  },
  ctInput: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    borderBottomColor: 'rgb(194, 196, 202)',
    // paddingTop: 10,
    paddingBottom: 10
  },
  avatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
  },
})

const mapStateToProps = (state) => {
  return {
    home: state.home,
    profile: state.profile
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    postStatus: (body) => dispatch(postStatus(body)),
    postStatusImage: (body, images) => dispatch(postStatusImage(body, images)),
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(ModalStatus);
  