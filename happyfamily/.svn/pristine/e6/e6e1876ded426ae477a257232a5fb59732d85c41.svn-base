
'use strict'
import { Alert } from 'react-native';
import {Actions} from 'react-native-router-flux'
import SimpleToast from 'react-native-simple-toast';
const {
  EVENT_REQUEST,
  EVENT_SUCCESS,
  EVENT_FAIL,
  ADD_EVENT_REQUEST,
  ADD_EVENT_SUCCESS,
  ADD_EVENT_FAIL,
} = require('../config/actionTypes');
const Calendar = require('../services/Calendar');

//addEvent
export function addEventRequest() {
  return {
    type: ADD_EVENT_REQUEST,
  }
}

export function addEventSuccess(data) {
  return {
    type: ADD_EVENT_SUCCESS,
    data
  }
}

export function addEventFail() {
  return {
    type: ADD_EVENT_FAIL,
  }
}

export function addEvent(body) {
  return dispatch => {
    dispatch(addEventRequest());
    return Calendar.addEvent(body).then(res => {
      switch(res.status) {
        case 200:
          Actions.pop()
          dispatch(addEventSuccess(res.data));
          return;
        case 500: 
          Alert.alert(
            'Thông báo!',
            'Đã có lỗi xảy ra! Vui lòng kiểm tra lại',
            [{text: 'Ok', style: 'cancel'}],
          );
          dispatch(addEventFail())
          return;
        default:
          SimpleToast.show(res.error)
          dispatch(addEventFail());
          return;
      }
    })
  }
}

//load event
export function eventRequest() {
  return {
    type: EVENT_REQUEST,
  }
}

export function eventSuccess(data) {
  return {
    type: EVENT_SUCCESS,
    data
  }
}

export function eventFail() {
  return {
    type: EVENT_FAIL,
  }
}

export function loadEvent(date) {
  return dispatch => {
    dispatch(eventRequest());
    return Calendar.event(date).then(res => {
      switch(res.status) {
        case 200:
          dispatch(eventSuccess(res.data));
          return;
        case 500: 
          Alert.alert(
            'Thông báo!',
            'Đã có lỗi xảy ra! Vui lòng kiểm tra lại',
            [{text: 'Ok', style: 'cancel'}],
          );
          dispatch(eventFail())
          return;
        default:
          dispatch(eventFail());
          return;
      }
    })
  }
}
